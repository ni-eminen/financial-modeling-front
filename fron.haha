import React, { useState } from 'react';
import { Send, Loader2 } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

const AIAgentInterface = () => {
  const [messages, setMessages] = useState([
    { role: 'assistant', content: "Hi! I'll help collect some information. What's your name?" }
  ]);
  const [userInput, setUserInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [currentStep, setCurrentStep] = useState('name');
  const [collectedData, setCollectedData] = useState({
    name: '',
    email: '',
    purpose: '',
    preferences: ''
  });

  // Questions for each step
  const steps = {
    name: {
      validate: (input) => input.length >= 2,
      nextStep: 'email',
      errorMessage: 'Please enter a valid name (at least 2 characters)',
      question: "What's your email address?"
    },
    email: {
      validate: (input) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(input),
      nextStep: 'purpose',
      errorMessage: 'Please enter a valid email address',
      question: 'What would you like assistance with today?'
    },
    purpose: {
      validate: (input) => input.length >= 10,
      nextStep: 'preferences',
      errorMessage: 'Please provide more detail (at least 10 characters)',
      question: 'Do you have any specific preferences or requirements?'
    },
    preferences: {
      validate: (input) => input.length >= 5,
      nextStep: 'complete',
      errorMessage: 'Please provide at least some preferences',
      question: 'Thank you! I have all the information I need.'
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!userInput.trim()) return;

    setIsLoading(true);
    const currentInput = userInput;
    setUserInput('');

    // Add user message
    setMessages(prev => [...prev, { role: 'user', content: currentInput }]);

    // Validate input
    const step = steps[currentStep];
    if (!step.validate(currentInput)) {
      setMessages(prev => [...prev, { role: 'assistant', content: step.errorMessage }]);
      setIsLoading(false);
      return;
    }

    // Store the data
    setCollectedData(prev => ({ ...prev, [currentStep]: currentInput }));

    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Move to next step
    if (step.nextStep !== 'complete') {
      setMessages(prev => [...prev, { role: 'assistant', content: step.question }]);
      setCurrentStep(step.nextStep);
    } else {
      setMessages(prev => [...prev, {
        role: 'assistant',
        content: `Perfect! I've collected all the information:
        Name: ${collectedData.name}
        Email: ${currentInput}
        Purpose: ${collectedData.purpose}
        Preferences: ${collectedData.preferences}
        
        I'll start working on your request right away!`
      }]);
    }

    setIsLoading(false);
  };

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>AI Assistant</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="h-96 overflow-y-auto mb-4 space-y-4">
          {messages.map((message, index) => (
            <div
              key={index}
              className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-[80%] p-3 rounded-lg ${
                  message.role === 'user'
                    ? 'bg-blue-500 text-white'
                    : 'bg-gray-100 text-gray-800'
                }`}
              >
                {message.content}
              </div>
            </div>
          ))}
        </div>
        
        <form onSubmit={handleSubmit} className="flex gap-2">
          <input
            type="text"
            value={userInput}
            onChange={(e) => setUserInput(e.target.value)}
            className="flex-1 p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Type your message..."
            disabled={isLoading}
          />
          <button
            type="submit"
            className="p-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:bg-blue-300"
            disabled={isLoading || !userInput.trim()}
          >
            {isLoading ? (
              <Loader2 className="w-6 h-6 animate-spin" />
            ) : (
              <Send className="w-6 h-6" />
            )}
          </button>
        </form>
      </CardContent>
    </Card>
  );
};

export default AIAgentInterface;
