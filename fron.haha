// types.ts
interface Message {
  role: 'user' | 'assistant';
  content: string;
}

interface CollectedData {
  name: string;
  email: string;
  purpose: string;
  preferences: string;
}

interface Step {
  validate: (input: string) => boolean;
  nextStep: keyof CollectedData | 'complete';
  errorMessage: string;
  question: string;
}

interface Steps {
  [key: string]: Step;
}

// AIAgentInterface.tsx
import React, { useState, FormEvent, ChangeEvent } from 'react';
import {
  Box,
  Card,
  CardContent,
  TextField,
  IconButton,
  Typography,
  Paper,
  CircularProgress,
} from '@mui/material';
import SendIcon from '@mui/icons-material/Send';

const AIAgentInterface: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([
    { role: 'assistant', content: "Hi! I'll help collect some information. What's your name?" }
  ]);
  const [userInput, setUserInput] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [currentStep, setCurrentStep] = useState<keyof CollectedData>('name');
  const [collectedData, setCollectedData] = useState<CollectedData>({
    name: '',
    email: '',
    purpose: '',
    preferences: ''
  });

  const steps: Steps = {
    name: {
      validate: (input: string) => input.length >= 2,
      nextStep: 'email',
      errorMessage: 'Please enter a valid name (at least 2 characters)',
      question: "What's your email address?"
    },
    email: {
      validate: (input: string) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(input),
      nextStep: 'purpose',
      errorMessage: 'Please enter a valid email address',
      question: 'What would you like assistance with today?'
    },
    purpose: {
      validate: (input: string) => input.length >= 10,
      nextStep: 'preferences',
      errorMessage: 'Please provide more detail (at least 10 characters)',
      question: 'Do you have any specific preferences or requirements?'
    },
    preferences: {
      validate: (input: string) => input.length >= 5,
      nextStep: 'complete',
      errorMessage: 'Please provide at least some preferences',
      question: 'Thank you! I have all the information I need.'
    }
  };

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    if (!userInput.trim()) return;

    setIsLoading(true);
    const currentInput = userInput;
    setUserInput('');

    // Add user message
    setMessages(prev => [...prev, { role: 'user', content: currentInput }]);

    // Validate input
    const step = steps[currentStep];
    if (!step.validate(currentInput)) {
      setMessages(prev => [...prev, { role: 'assistant', content: step.errorMessage }]);
      setIsLoading(false);
      return;
    }

    // Store the data
    setCollectedData(prev => ({ ...prev, [currentStep]: currentInput }));

    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Move to next step
    if (step.nextStep !== 'complete') {
      setMessages(prev => [...prev, { role: 'assistant', content: step.question }]);
      setCurrentStep(step.nextStep as keyof CollectedData);
    } else {
      setMessages(prev => [...prev, {
        role: 'assistant',
        content: `Perfect! I've collected all the information:
        Name: ${collectedData.name}
        Email: ${currentInput}
        Purpose: ${collectedData.purpose}
        Preferences: ${collectedData.preferences}
        
        I'll start working on your request right away!`
      }]);
    }

    setIsLoading(false);
  };

  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    setUserInput(e.target.value);
  };

  return (
    <Card sx={{ maxWidth: 600, margin: 'auto', mt: 2 }}>
      <CardContent>
        <Typography variant="h5" gutterBottom>
          AI Assistant
        </Typography>
        
        <Box sx={{ height: 400, overflowY: 'auto', mb: 2 }}>
          {messages.map((message, index) => (
            <Box
              key={index}
              sx={{
                display: 'flex',
                justifyContent: message.role === 'user' ? 'flex-end' : 'flex-start',
                mb: 1
              }}
            >
              <Paper
                elevation={1}
                sx={{
                  p: 1,
                  maxWidth: '80%',
                  bgcolor: message.role === 'user' ? 'primary.main' : 'grey.100',
                  color: message.role === 'user' ? 'white' : 'text.primary'
                }}
              >
                <Typography variant="body1">
                  {message.content}
                </Typography>
              </Paper>
            </Box>
          ))}
        </Box>
        
        <Box component="form" onSubmit={handleSubmit} sx={{ display: 'flex', gap: 1 }}>
          <TextField
            fullWidth
            value={userInput}
            onChange={handleInputChange}
            placeholder="Type your message..."
            disabled={isLoading}
            size="small"
          />
          <IconButton
            type="submit"
            color="primary"
            disabled={isLoading || !userInput.trim()}
          >
            {isLoading ? <CircularProgress size={24} /> : <SendIcon />}
          </IconButton>
        </Box>
      </CardContent>
    </Card>
  );
};

export default AIAgentInterface;
